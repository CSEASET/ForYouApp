{"ETCS430":[{"paperTitle":"Object Oriented Programming Using C++","paperCredits":3,"paperUnits":[{"unit":{"unitTitle":"Object oriented programming concepts","unitDetails":"Benefits of OOP, Applications of OOP , Introduction to C++, History of C++, Structure of C++, Difference between C and C++ , Basic data types, Derived data types, Symbolic constants., Dynamic initialization, Type modifiers, Type Casting, Operator and control statements, Input and Output statements in C++.Classes and objects, class specification, member function specification, scope resolution operator, Access qualifiers, Instance creation, Member functions. Function prototyping, Function components, Passing parameters, call by reference, Return by reference, Inline functions, Default arguments, Overloaded function."}},{"unit":{"unitTitle":"Array of objects","unitDetails":"pointers to objects, this pointer, Dynamic allocation operators, Dynamic objects.,Constructors, default constructor , Parameterized constructors , Constructor with dynamic allocation ,copy constructor , destructors, operator overloading, friend functions, overloading through friend functions , overloading the assignment operator, static members Objects , pointers and objects ,constant objects ,nested classes , local classes"}},{"unit":{"unitTitle":"Inheritance","unitDetails":"Defining derived classes, Single inheritance, protected data with private inheritance, multiple inheritance, multi level inheritance, hierarchical inheritance, hybrid inheritance, multipath inheritance, Constructors in derived and base class, Abstract classes, virtual function and dynamic polymorphism, pure virtual functions, virtual destructor, Exception Handling, principle of Exception handling, Exception handling mechanism, multiple catch, Nested try, Rethrowing the exception"}},{"unit":{"unitTitle":"Streams in C++","unitDetails":"Stream classes, Formatted and Unformatted data, manipulators, User defined manipulators, file streams, file pointer manipulation, file open and close, Templates, Template functions and Template classes."}}]}]}